%Notes from the 4th week of tutorial

%Hilbert matrix: famous for being bad conditioned:
%Can be defined using the built-in function hilb:

H = hilb(3)
%  H =
%  
%      1.0000    0.5000    0.3333
%      0.5000    0.3333    0.2500
%      0.3333    0.2500    0.2000

%Let's look at the eigenvalues of H:
eig(H)

%  ans =
%  
%      0.0027
%      0.1223
%      1.4083

%if we compute the conditioning number from the definition using the eigenvalues H..
eig_max = max(eig(H));
eig_min = min(eig(H));
cond_def = abs(eig_max/eig_min)
%we see that even if the size of H is small, the conditioning number (c) is still pretty big
%(Remember, we want c to be 1 (or close to 1..))
%  cond_def =
%  
%    524.0568

%If we define an Hilbert matrix bigger than before..
H = hilb(20);
%We can compute the conditioning number using the command 'cond' instead than looking at the eigenvalues
cond_20 = cond(H)
%It's huge
%  cond_20 =
%  
%     2.0383e+18


%The fact that H is ill-conditioned, influences the calculations when we try to invert the matrix:

%In fact, in the size of the matrix is big (i.e. n>15), MATLAB has troubles inverting it in the correct way:

%Let's invert H in standard way:
H_inv_stad = inv(H);
%warning!!
%  [Warning: Matrix is close to singular or badly scaled. Results may be inaccurate.
%  RCOND =  1.351364e-19.] 

%Instead, we can conpute the inverse of a H in the following way using 'invhilb'
H_inv_fun = invhilb(20);

%When we look at the difference between the two inverse matrices:
H_diff = H_inv - H_invhilb

%We get something far from being 0 everywhere:
%  H_diff =
%  
%     1.0e+27 *
%  
%    Columns 1 through 8
%  
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0001
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0003
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0001   -0.0010
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0004    0.0028
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0001    0.0009   -0.0060
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0002   -0.0015    0.0102
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0002    0.0019   -0.0133
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0002   -0.0019    0.0132
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0001    0.0014   -0.0098
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0001   -0.0008    0.0053
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0003   -0.0019
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0001    0.0004
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000
%  
%    Columns 9 through 16
%  
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000
%     -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0001    0.0002   -0.0002    0.0002   -0.0001
%     -0.0000    0.0001   -0.0004    0.0009   -0.0015    0.0019   -0.0019    0.0014
%      0.0003   -0.0010    0.0028   -0.0060    0.0102   -0.0133    0.0132   -0.0098
%     -0.0013    0.0048   -0.0137    0.0301   -0.0509    0.0664   -0.0661    0.0493
%      0.0048   -0.0180    0.0514   -0.1128    0.1914   -0.2502    0.2496   -0.1864
%     -0.0137    0.0514   -0.1467    0.3230   -0.5492    0.7194   -0.7188    0.5376
%      0.0301   -0.1128    0.3230   -0.7123    1.2135   -1.5924    1.5936   -1.1936
%     -0.0509    0.1914   -0.5492    1.2135   -2.0711    2.7220   -2.7282    2.0461
%      0.0664   -0.2502    0.7194   -1.5924    2.7220   -3.5828    3.5958   -2.7003
%     -0.0661    0.2496   -0.7188    1.5936   -2.7282    3.5958   -3.6136    2.7169
%      0.0493   -0.1864    0.5376   -1.1936    2.0461   -2.7003    2.7169   -2.0449
%     -0.0266    0.1008   -0.2912    0.6474   -1.1113    1.4683   -1.4789    1.1143
%      0.0098   -0.0373    0.1078   -0.2401    0.4126   -0.5458    0.5503   -0.4150
%     -0.0022    0.0084   -0.0244    0.0544   -0.0937    0.1240   -0.1252    0.0945
%      0.0002   -0.0009    0.0026   -0.0057    0.0098   -0.0130    0.0131   -0.0099
%  
%    Columns 17 through 20
%  
%     -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0000
%     -0.0000    0.0000   -0.0000    0.0000
%      0.0000   -0.0000    0.0000   -0.0000
%     -0.0000    0.0000   -0.0000    0.0000
%      0.0001   -0.0000    0.0000   -0.0000
%     -0.0008    0.0003   -0.0001    0.0000
%      0.0053   -0.0019  


%An example of well-conditioned problem.

%We want to solve a system AX = B with cond(A) ~ 1

%A good example is by using a rotation matrix:

%We define an angle theta:
theta = pi/6;

%The rotation matrix R is:
R = [cos(theta), sin(theta); -sin(theta), cos(theta)]

%  R =
%  
%      0.8660    0.5000
%     -0.5000    0.8660

%With eigenvalues:
eig(R)

%  ans =
%  
%     0.8660 + 0.5000i
%     0.8660 - 0.5000i

%And (obviously) conditioning number:
cond(R)

%  ans =
%  
%       1

%We define the vector B to solve RX = B:
B = [1;1]

%  B =
%  
%       1
%       1

%Solve RX=B using \ operator:

x = R\B

%  x =
%  
%      0.3660
%      1.3660

%Now we want to perturb the system by changing of a small quantity the vector B: we solve now
% Rx_perturb = B_perturb
B_perturb = [1;1.0001]

%  B_perturb =
%  
%      1.0000
%      1.0001


x_perturb = R\B_perturb

%We can notice that if R in well conditioned, and we perturb the system, the solution 
%is affected in a "controlled way".

%  x_perturb =
%  
%      0.3660
%      1.3661



% Example of ill-conditioned problem:

%We choose A to be:

A = [1,1,;1,1.0001]
%  
%  A =
%  
%      1.0000    1.0000
%      1.0000    1.0001


%This matrix in very bad conditioned:
cond(A)

%  ans =
%  
%     4.0002e+04

%We choose B to solve AY =B:
B = [1;1]

%  B =
%  
%       1
%       1

%The solution is the following:
y = A\B

%  y =
%  
%       1
%       0


%now we want to perturb again the system by a small quantity:
B_perturb = [1;1.001]

%  B_perturb =
%  
%      1.0000
%      1.0010

%And we solve  for y_perturb
y_perturb = A\B_perturb

%We note that the perturbate solution differs from the previous one by a big quantity:
%Ill conditioned problem may lead to an not controlled stability in the solution.
%  y_perturb =
%  
%     -9.0000
%     10.0000


%%%%%
%LU-chol decomposition: see note form last week to see how the factorization works in MATLAB
%This week you are gonna find an .m file to compare the time MATLAB takes to factorize a matrix using
%the two different methods.

%%%%%
%Parametrizing function: see .m files in the repository